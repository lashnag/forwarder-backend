/*
 * This file is generated by jOOQ.
 */
package ru.lashnev.forwarderbackend.dao.generated;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscriptions extends TableImpl<SubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subscriptions</code>
     */
    public static final Subscriptions SUBSCRIPTIONS = new Subscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionsRecord> getRecordType() {
        return SubscriptionsRecord.class;
    }

    /**
     * The column <code>public.subscriptions.subscription_id</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> SUBSCRIPTION_ID = createField(DSL.name("subscription_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.subscriptions.subscriber</code>.
     */
    public final TableField<SubscriptionsRecord, String> SUBSCRIBER = createField(DSL.name("subscriber"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.subscriptions.subscription</code>.
     */
    public final TableField<SubscriptionsRecord, String> SUBSCRIPTION = createField(DSL.name("subscription"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.subscriptions.keyword</code>.
     */
    public final TableField<SubscriptionsRecord, String> KEYWORD = createField(DSL.name("keyword"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.subscriptions</code> table reference
     */
    public Subscriptions(String alias) {
        this(DSL.name(alias), SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>public.subscriptions</code> table reference
     */
    public Subscriptions(Name alias) {
        this(alias, SUBSCRIPTIONS);
    }

    /**
     * Create a <code>public.subscriptions</code> table reference
     */
    public Subscriptions() {
        this(DSL.name("subscriptions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SubscriptionsRecord, Integer> getIdentity() {
        return (Identity<SubscriptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubscriptionsRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<SubscriptionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SUBSCRIPTIONS_SUBSCRIBER_SUBSCRIPTION_KEYWORD_KEY);
    }

    @Override
    public Subscriptions as(String alias) {
        return new Subscriptions(DSL.name(alias), this);
    }

    @Override
    public Subscriptions as(Name alias) {
        return new Subscriptions(alias, this);
    }

    @Override
    public Subscriptions as(Table<?> alias) {
        return new Subscriptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(String name) {
        return new Subscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Name name) {
        return new Subscriptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Table<?> name) {
        return new Subscriptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Condition condition) {
        return new Subscriptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
