/*
 * This file is generated by jOOQ.
 */
package ru.lashnev.forwarderbackend.dao.jooq.public_;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Groups;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Searches;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Subscribers;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Subscriptions;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.records.GroupsRecord;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.records.SearchesRecord;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.records.SubscribersRecord;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.records.SubscriptionsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<GroupsRecord> GROUPS_GROUPNAME_KEY = Internal.createUniqueKey(Groups.GROUPS, DSL.name("groups_groupname_key"), new TableField[] { Groups.GROUPS.GROUPNAME }, true);
    public static final UniqueKey<GroupsRecord> GROUPS_PKEY = Internal.createUniqueKey(Groups.GROUPS, DSL.name("groups_pkey"), new TableField[] { Groups.GROUPS.GROUP_ID }, true);
    public static final UniqueKey<SearchesRecord> SEARCHES_PKEY = Internal.createUniqueKey(Searches.SEARCHES, DSL.name("searches_pkey"), new TableField[] { Searches.SEARCHES.SEARCH_ID }, true);
    public static final UniqueKey<SearchesRecord> SEARCHES_PROPERTIES_KEY = Internal.createUniqueKey(Searches.SEARCHES, DSL.name("searches_properties_key"), new TableField[] { Searches.SEARCHES.PROPERTIES }, true);
    public static final UniqueKey<SubscribersRecord> SUBSCRIBERS_PKEY = Internal.createUniqueKey(Subscribers.SUBSCRIBERS, DSL.name("subscribers_pkey"), new TableField[] { Subscribers.SUBSCRIBERS.SUBSCRIBER_ID }, true);
    public static final UniqueKey<SubscribersRecord> SUBSCRIBERS_USERNAME_KEY = Internal.createUniqueKey(Subscribers.SUBSCRIBERS, DSL.name("subscribers_username_key"), new TableField[] { Subscribers.SUBSCRIBERS.USERNAME }, true);
    public static final UniqueKey<SubscriptionsRecord> KEYWORDS_PKEY = Internal.createUniqueKey(Subscriptions.SUBSCRIPTIONS, DSL.name("keywords_pkey"), new TableField[] { Subscriptions.SUBSCRIPTIONS.SUBSCRIPTION_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<SubscriptionsRecord, SearchesRecord> SUBSCRIPTIONS__FK_SEARCH = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("fk_search"), new TableField[] { Subscriptions.SUBSCRIPTIONS.SEARCH_ID }, Keys.SEARCHES_PKEY, new TableField[] { Searches.SEARCHES.SEARCH_ID }, true);
    public static final ForeignKey<SubscriptionsRecord, GroupsRecord> SUBSCRIPTIONS__KEYWORDS_GROUP_ID_FKEY = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("keywords_group_id_fkey"), new TableField[] { Subscriptions.SUBSCRIPTIONS.GROUP_ID }, Keys.GROUPS_PKEY, new TableField[] { Groups.GROUPS.GROUP_ID }, true);
    public static final ForeignKey<SubscriptionsRecord, SubscribersRecord> SUBSCRIPTIONS__KEYWORDS_SUBSCRIBER_ID_FKEY = Internal.createForeignKey(Subscriptions.SUBSCRIPTIONS, DSL.name("keywords_subscriber_id_fkey"), new TableField[] { Subscriptions.SUBSCRIPTIONS.SUBSCRIBER_ID }, Keys.SUBSCRIBERS_PKEY, new TableField[] { Subscribers.SUBSCRIBERS.SUBSCRIBER_ID }, true);
}
