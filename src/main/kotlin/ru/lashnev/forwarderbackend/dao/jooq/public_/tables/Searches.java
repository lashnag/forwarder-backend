/*
 * This file is generated by jOOQ.
 */
package ru.lashnev.forwarderbackend.dao.jooq.public_.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import ru.lashnev.forwarderbackend.dao.jooq.public_.Keys;
import ru.lashnev.forwarderbackend.dao.jooq.public_.Public;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Subscriptions.SubscriptionsPath;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.records.SearchesRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Searches extends TableImpl<SearchesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.searches</code>
     */
    public static final Searches SEARCHES = new Searches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SearchesRecord> getRecordType() {
        return SearchesRecord.class;
    }

    /**
     * The column <code>public.searches.search_id</code>.
     */
    public final TableField<SearchesRecord, Integer> SEARCH_ID = createField(DSL.name("search_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.searches.properties</code>.
     */
    public final TableField<SearchesRecord, String> PROPERTIES = createField(DSL.name("properties"), SQLDataType.CLOB, this, "");

    private Searches(Name alias, Table<SearchesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Searches(Name alias, Table<SearchesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.searches</code> table reference
     */
    public Searches(String alias) {
        this(DSL.name(alias), SEARCHES);
    }

    /**
     * Create an aliased <code>public.searches</code> table reference
     */
    public Searches(Name alias) {
        this(alias, SEARCHES);
    }

    /**
     * Create a <code>public.searches</code> table reference
     */
    public Searches() {
        this(DSL.name("searches"), null);
    }

    public <O extends Record> Searches(Table<O> path, ForeignKey<O, SearchesRecord> childPath, InverseForeignKey<O, SearchesRecord> parentPath) {
        super(path, childPath, parentPath, SEARCHES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SearchesPath extends Searches implements Path<SearchesRecord> {
        public <O extends Record> SearchesPath(Table<O> path, ForeignKey<O, SearchesRecord> childPath, InverseForeignKey<O, SearchesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SearchesPath(Name alias, Table<SearchesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SearchesPath as(String alias) {
            return new SearchesPath(DSL.name(alias), this);
        }

        @Override
        public SearchesPath as(Name alias) {
            return new SearchesPath(alias, this);
        }

        @Override
        public SearchesPath as(Table<?> alias) {
            return new SearchesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SearchesRecord, Integer> getIdentity() {
        return (Identity<SearchesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SearchesRecord> getPrimaryKey() {
        return Keys.SEARCHES_PKEY;
    }

    @Override
    public List<UniqueKey<SearchesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SEARCHES_PROPERTIES_KEY);
    }

    private transient SubscriptionsPath _subscriptions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.subscriptions</code> table
     */
    public SubscriptionsPath subscriptions() {
        if (_subscriptions == null)
            _subscriptions = new SubscriptionsPath(this, null, Keys.SUBSCRIPTIONS__FK_SEARCH.getInverseKey());

        return _subscriptions;
    }

    @Override
    public Searches as(String alias) {
        return new Searches(DSL.name(alias), this);
    }

    @Override
    public Searches as(Name alias) {
        return new Searches(alias, this);
    }

    @Override
    public Searches as(Table<?> alias) {
        return new Searches(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Searches rename(String name) {
        return new Searches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Searches rename(Name name) {
        return new Searches(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Searches rename(Table<?> name) {
        return new Searches(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Searches where(Condition condition) {
        return new Searches(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Searches where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Searches where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Searches where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Searches where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Searches where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Searches where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Searches where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Searches whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Searches whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
