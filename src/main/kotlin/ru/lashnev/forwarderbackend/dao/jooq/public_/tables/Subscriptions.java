/*
 * This file is generated by jOOQ.
 */
package ru.lashnev.forwarderbackend.dao.jooq.public_.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import ru.lashnev.forwarderbackend.dao.jooq.public_.Keys;
import ru.lashnev.forwarderbackend.dao.jooq.public_.Public;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Groups.GroupsPath;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Searches.SearchesPath;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.Subscribers.SubscribersPath;
import ru.lashnev.forwarderbackend.dao.jooq.public_.tables.records.SubscriptionsRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Subscriptions extends TableImpl<SubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subscriptions</code>
     */
    public static final Subscriptions SUBSCRIPTIONS = new Subscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionsRecord> getRecordType() {
        return SubscriptionsRecord.class;
    }

    /**
     * The column <code>public.subscriptions.subscription_id</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> SUBSCRIPTION_ID = createField(DSL.name("subscription_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.subscriptions.subscriber_id</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> SUBSCRIBER_ID = createField(DSL.name("subscriber_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subscriptions.group_id</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.subscriptions.search_id</code>.
     */
    public final TableField<SubscriptionsRecord, Integer> SEARCH_ID = createField(DSL.name("search_id"), SQLDataType.INTEGER, this, "");

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Subscriptions(Name alias, Table<SubscriptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.subscriptions</code> table reference
     */
    public Subscriptions(String alias) {
        this(DSL.name(alias), SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>public.subscriptions</code> table reference
     */
    public Subscriptions(Name alias) {
        this(alias, SUBSCRIPTIONS);
    }

    /**
     * Create a <code>public.subscriptions</code> table reference
     */
    public Subscriptions() {
        this(DSL.name("subscriptions"), null);
    }

    public <O extends Record> Subscriptions(Table<O> path, ForeignKey<O, SubscriptionsRecord> childPath, InverseForeignKey<O, SubscriptionsRecord> parentPath) {
        super(path, childPath, parentPath, SUBSCRIPTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SubscriptionsPath extends Subscriptions implements Path<SubscriptionsRecord> {
        public <O extends Record> SubscriptionsPath(Table<O> path, ForeignKey<O, SubscriptionsRecord> childPath, InverseForeignKey<O, SubscriptionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubscriptionsPath(Name alias, Table<SubscriptionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubscriptionsPath as(String alias) {
            return new SubscriptionsPath(DSL.name(alias), this);
        }

        @Override
        public SubscriptionsPath as(Name alias) {
            return new SubscriptionsPath(alias, this);
        }

        @Override
        public SubscriptionsPath as(Table<?> alias) {
            return new SubscriptionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SubscriptionsRecord, Integer> getIdentity() {
        return (Identity<SubscriptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubscriptionsRecord> getPrimaryKey() {
        return Keys.KEYWORDS_PKEY;
    }

    @Override
    public List<ForeignKey<SubscriptionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBSCRIPTIONS__KEYWORDS_SUBSCRIBER_ID_FKEY, Keys.SUBSCRIPTIONS__KEYWORDS_GROUP_ID_FKEY, Keys.SUBSCRIPTIONS__FK_SEARCH);
    }

    private transient SubscribersPath _subscribers;

    /**
     * Get the implicit join path to the <code>public.subscribers</code> table.
     */
    public SubscribersPath subscribers() {
        if (_subscribers == null)
            _subscribers = new SubscribersPath(this, Keys.SUBSCRIPTIONS__KEYWORDS_SUBSCRIBER_ID_FKEY, null);

        return _subscribers;
    }

    private transient GroupsPath _groups;

    /**
     * Get the implicit join path to the <code>public.groups</code> table.
     */
    public GroupsPath groups() {
        if (_groups == null)
            _groups = new GroupsPath(this, Keys.SUBSCRIPTIONS__KEYWORDS_GROUP_ID_FKEY, null);

        return _groups;
    }

    private transient SearchesPath _searches;

    /**
     * Get the implicit join path to the <code>public.searches</code> table.
     */
    public SearchesPath searches() {
        if (_searches == null)
            _searches = new SearchesPath(this, Keys.SUBSCRIPTIONS__FK_SEARCH, null);

        return _searches;
    }

    @Override
    public Subscriptions as(String alias) {
        return new Subscriptions(DSL.name(alias), this);
    }

    @Override
    public Subscriptions as(Name alias) {
        return new Subscriptions(alias, this);
    }

    @Override
    public Subscriptions as(Table<?> alias) {
        return new Subscriptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(String name) {
        return new Subscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Name name) {
        return new Subscriptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscriptions rename(Table<?> name) {
        return new Subscriptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Condition condition) {
        return new Subscriptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Subscriptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Subscriptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
